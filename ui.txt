import { createImageCredits } from "./helpers";import { make } from "../lib";import Tunes from "./tunes";import ControlPanel from "./controlpanel";/** * Class for working with UI: *  - rendering base structure *  - show/hide preview *  - apply tune view */export default class Ui {  /**   * @param {{api: object, config: object, onAddImageData: Function, onTuneToggled: Function}}   *   api - Editorjs API   *   config - Tool custom config   *   onAddImageData - Callback for adding image data   *   onTuneToggled - Callcack for updating tunes data   */  constructor({ api, config, onAddImageData, onTuneToggled, readOnly }) {    this.api = api;    this.config = config;    this.onAddImageData = onAddImageData;    this.onTuneToggled = onTuneToggled;    this.readOnly = readOnly;    this.CSS = {      baseClass: this.api.styles.block,      loading: this.api.styles.loader,      input: this.api.styles.input,      wrapper: "inline-image",      imageHolder: "inline-image__picture",      modal: "inline-image_modal",      modalImg: "inline-image_modal__img",      modalClose: "inline-image_modal__close",      caption: "inline-image__caption",    };    this.settings = [      {        name: "withBorder",        icon: '<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.8 10.592v2.043h2.35v2.138H15.8v2.232h-2.25v-2.232h-2.4v-2.138h2.4v-2.28h2.25v.237h1.15-1.15zM1.9 8.455v-3.42c0-1.154.985-2.09 2.2-2.09h4.2v2.137H4.15v3.373H1.9zm0 2.137h2.25v3.325H8.3v2.138H4.1c-1.215 0-2.2-.936-2.2-2.09v-3.373zm15.05-2.137H14.7V5.082h-4.15V2.945h4.2c1.215 0 2.2.936 2.2 2.09v3.42z"/></svg>',      },      {        name: "stretched",        icon: '<svg width="17" height="10" viewBox="0 0 17 10" xmlns="http://www.w3.org/2000/svg"><path d="M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z"/></svg>',      },      {        name: "withShadow",        icon: '<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z"/></svg>',      },      {        name: "withBackground",        icon: '<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.043 8.265l3.183-3.183h-2.924L4.75 10.636v2.923l4.15-4.15v2.351l-2.158 2.159H8.9v2.137H4.7c-1.215 0-2.2-.936-2.2-2.09v-8.93c0-1.154.985-2.09 2.2-2.09h10.663l.033-.033.034.034c1.178.04 2.12.96 2.12 2.089v3.23H15.3V5.359l-2.906 2.906h-2.35zM7.951 5.082H4.75v3.201l3.201-3.2zm5.099 7.078v3.04h4.15v-3.04h-4.15zm-1.1-2.137h6.35c.635 0 1.15.489 1.15 1.092v5.13c0 .603-.515 1.092-1.15 1.092h-6.35c-.635 0-1.15-.489-1.15-1.092v-5.13c0-.603.515-1.092 1.15-1.092z"/></svg>',      },    ];    this.controlPanel = new ControlPanel({      api,      config,      cssClasses: this.CSS,      onSelectImage: (imageData) => this.selectImage(imageData),    });    this.tunes = new Tunes({      cssClasses: {        settingsButton: this.api.styles.settingsButton,        settingsButtonActive: this.api.styles.settingsButtonActive,      },      settings: this.settings,      onTuneToggled,    });    this.nodes = {      wrapper: null,      loader: null,      imageHolder: null,      image: null,      modal: null,      caption: null,      credits: null,      button: null,    };     this.size = { x: 500, y: 400 };    this.resize = false;    // this.onMouseMove = this.onMouseMove.bind(this);  }  /**   * Renders tool UI   *   * @param {Object} data Saved tool data   * @returns {HTMLDivElement}   */  render(data) {    // const ref = useRef();    const wrapper = make("div", [this.CSS.baseClass, this.CSS.wrapper]);    const loader = make("div", this.CSS.loading);    const image = make("img", "", {      onload: () => this.onImageLoad(),      onerror: () => this.onImageLoadError(),      style: `height: inherit; width: inherit;`,      //  height: "50",    });    const button = make("button", "", {      onmousedown: (e) => this.onClickResize(e),     // onmousemove: (e) => this.onMouseMove(e),      onmouseup: (e) => this.onMouseUp(e),    });    const modal = make("div", this.CSS.modal);    const caption = make("div", [this.CSS.input, this.CSS.caption], {      contentEditable: !this.readOnly,      innerHTML: data.caption,    });    this.nodes.imageHolder = make("div", this.CSS.imageHolder, {      style: `height: ${this.size.y}px; width: ${this.size.x}px;`,    });    caption.dataset.placeholder = "Caption";    if (data.url || this.readOnly) {      wrapper.appendChild(loader);      var url = data.url || "/not_found.png";      if (        url.startsWith(          "https://firebasestorage.googleapis.com/v0/b/kodelab-5238e.appspot.com/o"        )      ) {        // Prefix with CDN Url        const parsed = new URL(url);        const path = parsed.pathname.replace(          "/v0/b/kodelab-5238e.appspot.com/o/",          ""        );        const bucketPath = decodeURIComponent(path);        url = `https://ik.imagekit.io/cdpekhd7xut/walkthrough/${bucketPath}`;      }      if (url.startsWith("https://firebasestorage.googleapis.com")) {        url = url.replace("&amp;", "&");      }      image.src = url;      this.buildImageCredits(data);    } else {      const controlPanelWrapper = this.controlPanel.render();      this.nodes.controlPanelWrapper = controlPanelWrapper;      wrapper.appendChild(controlPanelWrapper);    }    this.nodes.wrapper = wrapper;    this.nodes.loader = loader;    this.nodes.image = image;    this.nodes.caption = caption;    this.nodes.modal = modal;    this.nodes.button = button;    this.applySettings(data);    return wrapper;  }  /**   * Builds Unsplash image credits element   *   * @param {Object} imageData Tool data   * @returns {HTMLDivElement}   */  buildImageCredits(imageData) {    const unsplashData = imageData.unsplash;    if (unsplashData && unsplashData.author && unsplashData.profileLink) {      const { appName } = this.config.unsplash;      const credits = createImageCredits({ ...unsplashData, appName });      this.nodes.imageHolder.appendChild(credits);      this.nodes.credits = credits;    }  }  onClickResize(e) {    console.log("e", e);    this.resize = true;   // console.log("e", this.nodes.imageHolder);    this.nodes.imageHolder.onmousemove = (el) => {      if(this.resize){      let height = parseInt(this.nodes.imageHolder.style.height.replace("px", ""))      let width = parseInt(this.nodes.imageHolder.style.width.replace("px", ""))      this.nodes.imageHolder.style.height = `${height + el.movementY}px`      this.nodes.imageHolder.style.width = `${width + el.movementX}px`      }    }    // this.nodes.button.onmouseup = (ev) => {    //   console.log("ev", ev);    // }  }  onMouseMove1(e) {    console.log("e", e);    // setSize((currentSize) => ({    //   x: currentSize.x + e.movementX,    //   y: currentSize.y + e.movementY,    // }));    // this.setState = {    //   x: this.size.x + e.movementX,    //   y: this.size.y + e.movementY,    // };    let height = parseInt(this.nodes.imageHolder.style.height.replace("px", ""))    let width = parseInt(this.nodes.imageHolder.style.width.replace("px", ""))    console.log("this.nodes.imageHolder.height before", this.nodes.imageHolder.style.height)    this.nodes.imageHolder.style.height = `${height + e.movementY}px`    this.nodes.imageHolder.style.width = `${width + e.movementX}px`   console.log("this.nodes.imageHolder.style.height after", this.nodes.imageHolder.style.height)    this.size = {      x: this.size.x + e.movementX,      y: this.size.y + e.movementY,    };    console.log("this.size",this.size);    // this.setState(function (state) {    //   return {    //     size: {    //       x: this.state.size.x + e.movementX,    //       // y: this.state.size.y + e.movementY,    //     },    //   };    // });  }  onMouseUp(e) {    this.resize = false;    // ref.current.removeEventListener("mousemove", onMouseMove);    // ref.current.removeEventListener("mouseup", onMouseUp);    console.log("onMouseUp >> ", e);  //  this.nodes.imageHolder.onmousemove = (el) => { return false }  }  /**   * On image load callback   * Shows the embeded image   *   * @returns {void}   */  onImageLoad() {    this.nodes.imageHolder.prepend(this.nodes.image);    this.nodes.wrapper.appendChild(this.nodes.imageHolder);    this.nodes.wrapper.appendChild(this.nodes.button);    this.nodes.wrapper.appendChild(this.nodes.caption);    const modal = this.nodes.modal;    this.removeAllChildNodes(modal);    const modalImg = make("img", this.CSS.modalImg);    const closeModal = make("span", this.CSS.modalClose);    closeModal.innerHTML = "&times;";    closeModal.onclick = function (e) {      let tb = document.getElementById("apptitlebar");      if (tb) {        tb.style.display = "flex";      }      let ba = document.getElementById("bottomappbar");      if (ba) {        ba.style.display = "flex";      }      modal.style.display = "none";    };    modal.appendChild(modalImg);    modal.appendChild(closeModal);    this.nodes.wrapper.appendChild(this.nodes.modal);    this.nodes.image.onclick = function (e) {      let tb = document.getElementById("apptitlebar");      if (tb) {        tb.style.display = "none";      }      let ba = document.getElementById("bottomappbar");      if (ba) {        ba.style.display = "none";      }      modal.style.display = "flex";      modalImg.src = e.target.src;    };    this.nodes.loader.remove();  }  removeAllChildNodes = function (parent) {    if (!parent) {      return;    }    while (parent.firstChild) {      parent.removeChild(parent.firstChild);    }  };  /**   * Callback fired when image fails on load.   * It removes current editor block and notifies error   *   * @returns {void}   */  onImageLoadError() {    this.removeCurrentBlock();    this.api.notifier.show({      message: "Can not load the image, try again!",      style: "error",    });  }  /**   * Removes current block from editor   *   * @returns {void}   */  removeCurrentBlock() {    Promise.resolve()      .then(() => {        const blockIndex = this.api.blocks.getCurrentBlockIndex();        this.api.blocks.delete(blockIndex);      })      .catch((err) => {        console.error(err);      });  }  /**   * Makes buttons with tunes   *   * @returns {HTMLDivElement}   */  renderSettings(data) {    return this.tunes.render(data);  }  /**   * Shows a loader spinner   *   * @returns {void}   */  showLoader() {    this.nodes.controlPanelWrapper.remove();    this.nodes.wrapper.appendChild(this.nodes.loader);  }  /**   * Callback fired when an image is embeded   *   * @param {Object} data Tool data   * @returns {void}   */  selectImage(data) {    this.onAddImageData(data);    this.showLoader();    this.buildImageCredits(data);  }  /**   * Apply visual representation of activated tune   *   * @param {string} tuneName One of available tunes   * @param {boolean} status True for enable, false for disable   * @returns {void}   */  applyTune(tuneName, status) {    this.nodes.imageHolder.classList.toggle(      `${this.CSS.imageHolder}--${tuneName}`,      status    );    if (tuneName === "stretched") {      Promise.resolve()        .then(() => {          const blockIndex = this.api.blocks.getCurrentBlockIndex();          this.api.blocks.stretchBlock(blockIndex, status);        })        .catch((err) => {          console.error(err);        });    }  }  /**   * Apply tunes to image from data   *   * @param {Object} data Tool data   * @returns {void}   */  applySettings(data) {    this.settings.forEach((tune) => {      this.applyTune(tune.name, data[tune.name]);    });  }}